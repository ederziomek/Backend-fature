import Redis from 'ioredis';
import { config } from '@/config';

const globalForRedis = globalThis as unknown as {
  redis: Redis | undefined;
};

// Configura√ß√£o robusta para resolver problemas de DNS e conectividade
const redisConfig = {
  // Configura√ß√µes de timeout aumentadas
  connectTimeout: 30000,        // 30 segundos para conectar
  commandTimeout: 10000,        // 10 segundos para comandos
  
  // Configura√ß√µes de retry robustas
  retryDelayOnFailover: 100,
  retryDelayOnClusterDown: 300,
  maxRetriesPerRequest: 5,      // Aumenta tentativas de 3 para 5
  
  // Configura√ß√µes de conex√£o
  lazyConnect: false,           // Conecta imediatamente para detectar problemas
  enableReadyCheck: true,       // Habilita ready check
  enableOfflineQueue: true,     // Mant√©m comandos em queue durante reconex√£o
  
  // Configura√ß√£o de reconex√£o personalizada
  retryConnect: (times: number) => {
    const delay = Math.min(times * 1000, 10000); // At√© 10 segundos entre tentativas
    console.log(`üîÑ Tentativa de reconex√£o Redis ${times} em ${delay}ms`);
    return delay;
  },
  
  // Configura√ß√µes de fam√≠lia de endere√ßos (for√ßa IPv4)
  family: 4,
  
  // Configura√ß√µes de keep-alive (corrigido para number)
  keepAlive: 30000,             // 30 segundos
  keepAliveInitialDelay: 0,
  
  // Configura√ß√µes adicionais para estabilidade
  maxLoadingTimeout: 5000,
  enableAutoPipelining: false,  // Desabilita auto pipelining para evitar problemas
};

// Criar inst√¢ncia do Redis com configura√ß√£o robusta
export const redis = globalForRedis.redis ?? new Redis(config.redis.url, redisConfig);

// Event listeners para monitoramento detalhado
redis.on('connect', () => {
  console.log('‚úÖ Redis conectado com sucesso');
});

redis.on('ready', () => {
  console.log('‚úÖ Redis pronto para uso');
});

redis.on('error', (err: Error) => {
  console.error('‚ùå Erro Redis:', err.message);
  // Log adicional para problemas de DNS
  if (err.message.includes('ENOTFOUND')) {
    console.error('üîç Problema de DNS detectado. Verificando configura√ß√£o de rede...');
  }
});

redis.on('close', () => {
  console.log('‚ö†Ô∏è Conex√£o Redis fechada');
});

redis.on('reconnecting', (ms: number) => {
  console.log(`üîÑ Reconectando Redis em ${ms}ms`);
});

redis.on('end', () => {
  console.log('üîö Conex√£o Redis encerrada');
});

if (config.server.isDevelopment) globalForRedis.redis = redis;

// Fun√ß√£o para testar conex√£o com retry autom√°tico
export async function testRedisConnection(): Promise<boolean> {
  const maxAttempts = 5;
  let attempt = 1;
  
  while (attempt <= maxAttempts) {
    try {
      console.log(`üîç Testando conex√£o Redis (tentativa ${attempt}/${maxAttempts})`);
      await redis.ping();
      console.log('‚úÖ Redis conectado com sucesso');
      return true;
    } catch (error: any) {
      console.error(`‚ùå Tentativa ${attempt} falhou:`, error.message);
      
      if (attempt === maxAttempts) {
        console.error('‚ùå Todas as tentativas de conex√£o Redis falharam');
        console.error('üîß Sugest√µes:');
        console.error('   1. Verificar se o servi√ßo Redis est√° ativo');
        console.error('   2. Verificar vari√°vel REDIS_URL');
        console.error('   3. Verificar conectividade de rede');
        return false;
      }
      
      // Aguarda antes da pr√≥xima tentativa
      const delay = attempt * 2000; // 2s, 4s, 6s, 8s
      console.log(`‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      attempt++;
    }
  }
  
  return false;
}

// Fun√ß√£o para desconectar
export async function disconnectRedis(): Promise<void> {
  try {
    await redis.disconnect();
    console.log('‚úÖ Redis desconectado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao desconectar Redis:', error);
  }
}

// Utilit√°rios para cache com fallback resiliente
export const cache = {
  async get<T>(key: string): Promise<T | null> {
    try {
      const value = await redis.get(key);
      return value ? JSON.parse(value) : null;
    } catch (error) {
      console.error('‚ùå Erro ao buscar cache:', error);
      return null;
    }
  },

  async set(key: string, value: any, ttl: number = 3600): Promise<boolean> {
    try {
      await redis.setex(key, ttl, JSON.stringify(value));
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao salvar cache:', error);
      return false;
    }
  },

  async del(key: string): Promise<boolean> {
    try {
      await redis.del(key);
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao deletar cache:', error);
      return false;
    }
  },

  async exists(key: string): Promise<boolean> {
    try {
      const result = await redis.exists(key);
      return result === 1;
    } catch (error) {
      console.error('‚ùå Erro ao verificar cache:', error);
      return false;
    }
  }
};

// Inicializa√ß√£o autom√°tica com retry
(async () => {
  if (!config.server.isTest) {
    console.log('üöÄ Inicializando conex√£o Redis...');
    const connected = await testRedisConnection();
    if (!connected) {
      console.warn('‚ö†Ô∏è Redis n√£o conectado - aplica√ß√£o continuar√° sem cache');
    }
  }
})();

