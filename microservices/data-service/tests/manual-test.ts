// ===============================================
// SCRIPT DE TESTE MANUAL - FLUXO CPA COMPLETO
// ===============================================

import axios from 'axios';
import crypto from 'crypto';

// Configura√ß√µes
const DATA_SERVICE_URL = 'http://localhost:3002';
const AFFILIATE_SERVICE_URL = 'http://localhost:3001';
const WEBHOOK_SECRET = 'test_secret_key_for_development';

// Dados de teste
const TEST_CUSTOMER_ID = 'test-customer-' + Date.now();
const TEST_AFFILIATE_ID = 'test-affiliate-' + Date.now();

class CPAFlowTester {
  
  /**
   * Executa teste completo do fluxo CPA
   */
  async runCompleteTest(): Promise<void> {
    console.log('üöÄ Iniciando teste completo do fluxo CPA...\n');

    try {
      // 1. Verificar sa√∫de dos servi√ßos
      await this.checkServicesHealth();

      // 2. Testar valida√ß√£o CPA Modelo 1.1
      await this.testCPAModel11();

      // 3. Testar valida√ß√£o CPA Modelo 1.2
      await this.testCPAModel12();

      // 4. Testar webhook entre servi√ßos
      await this.testWebhookIntegration();

      // 5. Testar monitor de transa√ß√µes
      await this.testTransactionMonitor();

      console.log('‚úÖ Todos os testes passaram com sucesso!');

    } catch (error) {
      console.error('‚ùå Erro durante os testes:', error);
      process.exit(1);
    }
  }

  /**
   * Verifica sa√∫de dos servi√ßos
   */
  async checkServicesHealth(): Promise<void> {
    console.log('üìä Verificando sa√∫de dos servi√ßos...');

    try {
      // Data Service
      const dataServiceHealth = await axios.get(`${DATA_SERVICE_URL}/api/v1/health`);
      console.log(`‚úÖ Data Service: ${dataServiceHealth.data.data.status}`);

      // Affiliate Service (se dispon√≠vel)
      try {
        const affiliateServiceHealth = await axios.get(`${AFFILIATE_SERVICE_URL}/health`);
        console.log(`‚úÖ Affiliate Service: ${affiliateServiceHealth.data.status || 'healthy'}`);
      } catch (error) {
        console.log('‚ö†Ô∏è  Affiliate Service n√£o dispon√≠vel (normal para testes isolados)');
      }

    } catch (error) {
      throw new Error(`Falha na verifica√ß√£o de sa√∫de: ${error}`);
    }

    console.log('');
  }

  /**
   * Testa valida√ß√£o CPA Modelo 1.1
   */
  async testCPAModel11(): Promise<void> {
    console.log('üí∞ Testando CPA Modelo 1.1 (Primeiro dep√≥sito ‚â• R$ 30)...');

    try {
      const response = await axios.post(
        `${DATA_SERVICE_URL}/api/v1/customers/${TEST_CUSTOMER_ID}/validate-cpa`,
        {},
        {
          params: { model: '1.1' }
        }
      );

      console.log(`‚úÖ Valida√ß√£o CPA 1.1 executada`);
      console.log(`   - Customer ID: ${TEST_CUSTOMER_ID}`);
      console.log(`   - Resultados: ${response.data.data.validation_results.length}`);

      if (response.data.data.validation_results.length > 0) {
        const result = response.data.data.validation_results[0];
        console.log(`   - Modelo: ${result.model}`);
        console.log(`   - Valida√ß√£o passou: ${result.validation_passed}`);
        console.log(`   - Eleg√≠vel para comiss√£o: ${result.commission_eligible}`);
      }

    } catch (error) {
      if (axios.isAxiosError(error) && error.response?.status === 404) {
        console.log('‚ÑπÔ∏è  Cliente n√£o encontrado (esperado para dados de teste)');
      } else {
        throw error;
      }
    }

    console.log('');
  }

  /**
   * Testa valida√ß√£o CPA Modelo 1.2
   */
  async testCPAModel12(): Promise<void> {
    console.log('üéØ Testando CPA Modelo 1.2 (Dep√≥sito + Atividade)...');

    try {
      const response = await axios.post(
        `${DATA_SERVICE_URL}/api/v1/customers/${TEST_CUSTOMER_ID}/validate-cpa`,
        {},
        {
          params: { model: '1.2' }
        }
      );

      console.log(`‚úÖ Valida√ß√£o CPA 1.2 executada`);
      console.log(`   - Customer ID: ${TEST_CUSTOMER_ID}`);
      console.log(`   - Resultados: ${response.data.data.validation_results.length}`);

      if (response.data.data.validation_results.length > 0) {
        const result = response.data.data.validation_results[0];
        console.log(`   - Modelo: ${result.model}`);
        console.log(`   - Valida√ß√£o passou: ${result.validation_passed}`);
        if (result.activity_metrics) {
          console.log(`   - Apostas: ${result.activity_metrics.bet_count}`);
          console.log(`   - GGR: R$ ${result.activity_metrics.total_ggr}`);
        }
      }

    } catch (error) {
      if (axios.isAxiosError(error) && error.response?.status === 404) {
        console.log('‚ÑπÔ∏è  Cliente n√£o encontrado (esperado para dados de teste)');
      } else {
        throw error;
      }
    }

    console.log('');
  }

  /**
   * Testa integra√ß√£o de webhook
   */
  async testWebhookIntegration(): Promise<void> {
    console.log('üîó Testando integra√ß√£o de webhook...');

    try {
      // Testar webhook do Affiliate Service (se dispon√≠vel)
      try {
        const webhookTest = await axios.get(`${AFFILIATE_SERVICE_URL}/api/v1/webhooks/test`);
        console.log('‚úÖ Webhook do Affiliate Service funcionando');
        console.log(`   - Resposta: ${webhookTest.data.data.message}`);
      } catch (error) {
        console.log('‚ö†Ô∏è  Webhook do Affiliate Service n√£o dispon√≠vel');
      }

      // Simular evento de webhook
      const testEvent = {
        event: {
          id: `test_event_${Date.now()}`,
          type: 'cpa.validation.completed',
          source: 'data-service',
          timestamp: new Date().toISOString(),
          data: {
            customer_id: TEST_CUSTOMER_ID,
            affiliate_id: TEST_AFFILIATE_ID,
            model: '1.1',
            validation_passed: true,
            commission_eligible: true,
          },
        },
        timestamp: new Date().toISOString(),
        source: 'data-service',
      };

      // Gerar assinatura
      const signature = this.generateWebhookSignature(testEvent);

      console.log('üì§ Simulando envio de webhook...');
      console.log(`   - Event ID: ${testEvent.event.id}`);
      console.log(`   - Event Type: ${testEvent.event.type}`);
      console.log(`   - Signature: ${signature.substring(0, 20)}...`);

    } catch (error) {
      console.log('‚ö†Ô∏è  Erro na integra√ß√£o de webhook (normal se Affiliate Service n√£o estiver rodando)');
    }

    console.log('');
  }

  /**
   * Testa monitor de transa√ß√µes
   */
  async testTransactionMonitor(): Promise<void> {
    console.log('üìä Testando monitor de transa√ß√µes...');

    try {
      // Verificar estat√≠sticas do monitor
      const stats = await axios.get(`${DATA_SERVICE_URL}/api/v1/monitor/stats`);
      console.log('‚úÖ Estat√≠sticas do monitor obtidas');
      console.log(`   - Monitor rodando: ${stats.data.data.is_running}`);
      console.log(`   - Intervalo: ${stats.data.data.polling_interval_ms}ms`);
      console.log(`   - Tamanho do lote: ${stats.data.data.batch_size}`);

      // Testar start/stop do monitor
      await axios.post(`${DATA_SERVICE_URL}/api/v1/monitor/start`);
      console.log('‚úÖ Monitor iniciado com sucesso');

      await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar 2 segundos

      await axios.post(`${DATA_SERVICE_URL}/api/v1/monitor/stop`);
      console.log('‚úÖ Monitor parado com sucesso');

    } catch (error) {
      throw new Error(`Erro no teste do monitor: ${error}`);
    }

    console.log('');
  }

  /**
   * Gera assinatura HMAC para webhook
   */
  private generateWebhookSignature(payload: any): string {
    const payloadString = JSON.stringify(payload);
    const signature = crypto
      .createHmac('sha256', WEBHOOK_SECRET)
      .update(payloadString)
      .digest('hex');
    
    return `sha256=${signature}`;
  }

  /**
   * Testa consultas de dados
   */
  async testDataQueries(): Promise<void> {
    console.log('üîç Testando consultas de dados...');

    try {
      // Testar busca de usu√°rio (deve falhar com dados de teste)
      try {
        const user = await axios.get(`${DATA_SERVICE_URL}/api/v1/users/${TEST_CUSTOMER_ID}`);
        console.log('‚úÖ Consulta de usu√°rio funcionando');
      } catch (error) {
        console.log('‚ÑπÔ∏è  Usu√°rio de teste n√£o encontrado (esperado)');
      }

      // Testar busca de afiliado
      try {
        const affiliate = await axios.get(`${DATA_SERVICE_URL}/api/v1/affiliates/${TEST_AFFILIATE_ID}`);
        console.log('‚úÖ Consulta de afiliado funcionando');
      } catch (error) {
        console.log('‚ÑπÔ∏è  Afiliado de teste n√£o encontrado (esperado)');
      }

      // Testar busca de transa√ß√µes
      try {
        const transactions = await axios.get(
          `${DATA_SERVICE_URL}/api/v1/customers/${TEST_CUSTOMER_ID}/transactions`
        );
        console.log('‚úÖ Consulta de transa√ß√µes funcionando');
        console.log(`   - Total encontrado: ${transactions.data.data.pagination.total}`);
      } catch (error) {
        console.log('‚ÑπÔ∏è  Transa√ß√µes de teste n√£o encontradas (esperado)');
      }

    } catch (error) {
      console.log('‚ö†Ô∏è  Erro nas consultas de dados:', error);
    }

    console.log('');
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  const tester = new CPAFlowTester();
  
  tester.runCompleteTest()
    .then(() => {
      console.log('üéâ Teste completo finalizado!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Falha nos testes:', error);
      process.exit(1);
    });
}

export { CPAFlowTester };

