import Fastify from 'fastify';
import cors from '@fastify/cors';
import helmet from '@fastify/helmet';
import rateLimit from '@fastify/rate-limit';
import swagger from '@fastify/swagger';
import swaggerUi from '@fastify/swagger-ui';
import { notificationConfig } from '@/config';
import { notificationRoutes } from '@/routes/notification.routes';
import { checkDatabaseHealth, disconnectDatabase } from '@/config/database';
import { checkRedisHealth, disconnectRedis } from '@/config/redis';

// Criar inst√¢ncia do Fastify
const fastify = Fastify({
  logger: {
    level: notificationConfig.logging.level,
    transport: notificationConfig.logging.prettyPrint ? {
      target: 'pino-pretty',
      options: {
        colorize: true
      }
    } : undefined,
  },
});

// Configurar CORS
fastify.register(cors, {
  origin: true, // Permitir todas as origens em desenvolvimento
  credentials: true,
});

// Configurar Helmet para seguran√ßa
fastify.register(helmet, {
  contentSecurityPolicy: false, // Desabilitar CSP para Swagger UI
});

// Configurar Rate Limiting
fastify.register(rateLimit, {
  max: notificationConfig.rateLimit.max,
  timeWindow: notificationConfig.rateLimit.timeWindow,
});

// Configurar Swagger para documenta√ß√£o
fastify.register(swagger, {
  swagger: {
    info: {
      title: 'Notification Service API',
      description: 'API do Microsservi√ßo de Notifica√ß√µes do Sistema Fature 100x',
      version: '1.0.0',
    },
    host: `${notificationConfig.host}:${notificationConfig.port}`,
    schemes: ['http', 'https'],
    consumes: ['application/json'],
    produces: ['application/json'],
    tags: [
      { name: 'Notifications', description: 'Opera√ß√µes de notifica√ß√£o' },
      { name: 'Templates', description: 'Gerenciamento de templates' },
      { name: 'Preferences', description: 'Prefer√™ncias de usu√°rio' },
      { name: 'Health', description: 'Verifica√ß√£o de sa√∫de' },
    ],
  },
});

// Configurar Swagger UI
fastify.register(swaggerUi, {
  routePrefix: '/docs',
  uiConfig: {
    docExpansion: 'list',
    deepLinking: false,
  },
  staticCSP: true,
  transformStaticCSP: (header) => header,
});

// Registrar rotas
fastify.register(notificationRoutes, { prefix: '/api/v1' });

// Rota raiz
fastify.get('/', async (request, reply) => {
  return {
    service: 'notification-service',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString(),
    docs: '/docs',
    health: '/api/v1/health',
  };
});

// Hook para verificar sa√∫de na inicializa√ß√£o
fastify.addHook('onReady', async () => {
  console.log('üöÄ Notification Service iniciado');
  console.log(`üì° Servidor rodando em http://${notificationConfig.host}:${notificationConfig.port}`);
  console.log(`üìö Documenta√ß√£o dispon√≠vel em http://${notificationConfig.host}:${notificationConfig.port}/docs`);
  
  // Verificar conex√µes essenciais
  const dbHealth = await checkDatabaseHealth();
  const redisHealth = await checkRedisHealth();
  
  console.log(`üóÑÔ∏è  Database: ${dbHealth ? '‚úÖ Conectado' : '‚ùå Falha na conex√£o'}`);
  console.log(`üî¥ Redis: ${redisHealth ? '‚úÖ Conectado' : '‚ùå Falha na conex√£o'}`);
  
  if (!dbHealth || !redisHealth) {
    console.warn('‚ö†Ô∏è  Algumas depend√™ncias n√£o est√£o dispon√≠veis');
  }
});

// Hook para limpeza na finaliza√ß√£o
fastify.addHook('onClose', async () => {
  console.log('üõë Finalizando Notification Service...');
  
  try {
    await disconnectDatabase();
    console.log('üóÑÔ∏è  Database desconectado');
  } catch (error) {
    console.error('‚ùå Erro ao desconectar database:', error);
  }
  
  try {
    await disconnectRedis();
    console.log('üî¥ Redis desconectado');
  } catch (error) {
    console.error('‚ùå Erro ao desconectar Redis:', error);
  }
  
  console.log('‚úÖ Notification Service finalizado');
});

// Tratamento de erros globais
fastify.setErrorHandler((error, request, reply) => {
  console.error('‚ùå Erro n√£o tratado:', error);
  
  // Erro de valida√ß√£o
  if (error.validation) {
    return reply.status(400).send({
      error: 'Dados inv√°lidos',
      message: error.message,
      details: error.validation,
    });
  }
  
  // Erro de rate limit
  if (error.statusCode === 429) {
    return reply.status(429).send({
      error: 'Muitas requisi√ß√µes',
      message: 'Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.',
    });
  }
  
  // Erro interno
  return reply.status(500).send({
    error: 'Erro interno do servidor',
    message: notificationConfig.nodeEnv === 'development' ? error.message : 'Algo deu errado',
  });
});

// Tratamento de rotas n√£o encontradas
fastify.setNotFoundHandler((request, reply) => {
  return reply.status(404).send({
    error: 'Rota n√£o encontrada',
    message: `Rota ${request.method} ${request.url} n√£o existe`,
    availableRoutes: {
      docs: '/docs',
      health: '/api/v1/health',
      notifications: '/api/v1/notifications/*',
      templates: '/api/v1/templates/*',
      preferences: '/api/v1/preferences/*',
    },
  });
});

// Fun√ß√£o para iniciar o servidor
async function start() {
  try {
    await fastify.listen({
      port: notificationConfig.port,
      host: notificationConfig.host,
    });
  } catch (error) {
    console.error('‚ùå Erro ao iniciar servidor:', error);
    process.exit(1);
  }
}

// Tratamento de sinais do sistema
process.on('SIGINT', async () => {
  console.log('\nüõë Recebido SIGINT, finalizando servidor...');
  await fastify.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Recebido SIGTERM, finalizando servidor...');
  await fastify.close();
  process.exit(0);
});

// Tratamento de exce√ß√µes n√£o capturadas
process.on('uncaughtException', (error) => {
  console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promise rejeitada n√£o tratada:', reason);
  console.error('Promise:', promise);
  process.exit(1);
});

// Iniciar servidor se este arquivo for executado diretamente
if (require.main === module) {
  start();
}

export { fastify };
export default fastify;

