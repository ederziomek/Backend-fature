// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  pending
  active
  inactive
  suspended
  banned
}

enum AffiliateCategory {
  jogador
  iniciante
  afiliado
  profissional
  expert
  mestre
}

enum AffiliateStatus {
  active
  inactive
  suspended
  pending_reactivation
}

enum TransactionType {
  sale
  deposit
  bet
  bonus
  adjustment
}

enum TransactionStatus {
  pending
  processed
  failed
  cancelled
}

enum CommissionStatus {
  calculated
  approved
  paid
  cancelled
  disputed
}

enum CommissionType {
  cpa
  revshare
}

enum CpaValidationModel {
  model_1_1
  model_1_2
}

enum ChestRarity {
  common
  rare
  epic
  legendary
}

enum ChestStatus {
  available
  opened
  expired
}

enum RankingType {
  monthly
  quarterly
  annual
  special_event
}

enum RankingStatus {
  draft
  active
  completed
  cancelled
}

enum SequenceStatus {
  active
  paused
  completed
  expired
}

enum InactivityStatus {
  active
  reactivated
  expired
}

enum LogSeverity {
  debug
  info
  warning
  error
  critical
}

// Tabelas principais

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String    @unique @db.VarChar(255)
  passwordHash      String    @map("password_hash") @db.VarChar(255)
  name              String    @db.VarChar(255)
  phone             String?   @db.VarChar(20)
  document          String?   @unique @db.VarChar(20)
  status            UserStatus @default(pending)
  emailVerifiedAt   DateTime? @map("email_verified_at")
  phoneVerifiedAt   DateTime? @map("phone_verified_at")
  lastLoginAt       DateTime? @map("last_login_at")
  mfaSecret         String?   @map("mfa_secret") @db.VarChar(255)
  mfaEnabled        Boolean   @default(false) @map("mfa_enabled")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  // Relacionamentos
  affiliate         Affiliate?
  sessions          UserSession[]
  auditLogs         AuditLog[]

  @@map("users")
}

model UserSession {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  sessionToken      String   @unique @map("session_token") @db.VarChar(255)
  deviceFingerprint String?  @map("device_fingerprint") @db.VarChar(255)
  ipAddress         String?  @map("ip_address") @db.Inet
  userAgent         String?  @map("user_agent") @db.Text
  expiresAt         DateTime @map("expires_at")
  lastUsedAt        DateTime @default(now()) @map("last_used_at")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relacionamentos
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Affiliate {
  id                      String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String            @unique @map("user_id") @db.Uuid
  parentId                String?           @map("parent_id") @db.Uuid
  referralCode            String            @unique @map("referral_code") @db.VarChar(20)
  level                   Int               @default(0)
  status                  AffiliateStatus   @default(active)
  joinedAt                DateTime          @default(now()) @map("joined_at")
  lastActivityAt          DateTime?         @map("last_activity_at")
  inactivityAppliedAt     DateTime?         @map("inactivity_applied_at")
  reactivationCount       Int               @default(0) @map("reactivation_count")
  totalReferrals          Int               @default(0) @map("total_referrals")
  validatedReferrals      Int               @default(0) @map("validated_referrals")
  activeReferrals         Int               @default(0) @map("active_referrals")
  lifetimeVolume          Decimal           @default(0) @map("lifetime_volume") @db.Decimal(15, 2)
  lifetimeCommissions     Decimal           @default(0) @map("lifetime_commissions") @db.Decimal(15, 2)
  currentMonthVolume      Decimal           @default(0) @map("current_month_volume") @db.Decimal(15, 2)
  currentMonthCommissions Decimal           @default(0) @map("current_month_commissions") @db.Decimal(15, 2)
  negativeCarryover       Decimal           @default(0) @map("negative_carryover") @db.Decimal(15, 2)
  metadata                Json?
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")

  // Relacionamentos
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent                  Affiliate?        @relation("AffiliateHierarchy", fields: [parentId], references: [id])
  children                Affiliate[]       @relation("AffiliateHierarchy")
  
  // Hierarquia
  descendants             AffiliateHierarchy[] @relation("AncestorHierarchy")
  ancestors               AffiliateHierarchy[] @relation("DescendantHierarchy")
  
  // Transações e comissões
  transactions            Transaction[]
  commissions             Commission[]
  referrals               Referral[]
  
  // Gamificação
  sequences               AffiliateSequence[]
  chests                  AffiliateChest[]
  rankings                RankingParticipant[]
  
  // Inatividade
  inactivityRules         InactivityRule[]

  @@map("affiliates")
}

model AffiliateHierarchy {
  descendantId    String    @map("descendant_id") @db.Uuid
  ancestorId      String    @map("ancestor_id") @db.Uuid
  levelDifference Int       @map("level_difference")
  pathLength      Int       @map("path_length")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relacionamentos
  descendant      Affiliate @relation("DescendantHierarchy", fields: [descendantId], references: [id], onDelete: Cascade)
  ancestor        Affiliate @relation("AncestorHierarchy", fields: [ancestorId], references: [id], onDelete: Cascade)

  @@id([descendantId, ancestorId])
  @@map("affiliate_hierarchy")
}

model Transaction {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  externalId   String?           @unique @map("external_id") @db.VarChar(255)
  affiliateId  String            @map("affiliate_id") @db.Uuid
  customerId   String?           @map("customer_id") @db.Uuid
  type         TransactionType
  amount       Decimal           @db.Decimal(15, 2)
  currency     String            @default("BRL") @db.VarChar(3)
  status       TransactionStatus @default(pending)
  processedAt  DateTime?         @map("processed_at")
  description  String?           @db.Text
  metadata     Json?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Relacionamentos
  affiliate    Affiliate         @relation(fields: [affiliateId], references: [id])
  commissions  Commission[]

  @@map("transactions")
}

model Commission {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transactionId String?          @map("transaction_id") @db.Uuid
  affiliateId   String           @map("affiliate_id") @db.Uuid
  type          CommissionType   @default(revshare)
  level         Int
  percentage    Decimal?         @db.Decimal(5, 2)
  amount        Decimal          @db.Decimal(15, 2)
  status        CommissionStatus @default(calculated)
  calculatedAt  DateTime         @default(now()) @map("calculated_at")
  approvedAt    DateTime?        @map("approved_at")
  paidAt        DateTime?        @map("paid_at")
  metadata      Json?
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relacionamentos
  transaction   Transaction?     @relation(fields: [transactionId], references: [id])
  affiliate     Affiliate        @relation(fields: [affiliateId], references: [id])

  @@map("commissions")
}

// Gamificação

model Sequence {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  days        Int
  rewards     Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  affiliateSequences AffiliateSequence[]

  @@map("sequences")
}

model AffiliateSequence {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  affiliateId  String         @map("affiliate_id") @db.Uuid
  sequenceId   String         @map("sequence_id") @db.Uuid
  currentDay   Int            @default(1) @map("current_day")
  status       SequenceStatus @default(active)
  startedAt    DateTime       @default(now()) @map("started_at")
  lastClaimAt  DateTime?      @map("last_claim_at")
  completedAt  DateTime?      @map("completed_at")
  metadata     Json?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relacionamentos
  affiliate    Affiliate      @relation(fields: [affiliateId], references: [id])
  sequence     Sequence       @relation(fields: [sequenceId], references: [id])

  @@map("affiliate_sequences")
}

model Chest {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique @db.VarChar(255)
  description String?     @db.Text
  rarity      ChestRarity
  rewards     Json
  probability Decimal     @db.Decimal(5, 4)
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  affiliateChests AffiliateChest[]

  @@map("chests")
}

model AffiliateChest {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  affiliateId String      @map("affiliate_id") @db.Uuid
  chestId     String      @map("chest_id") @db.Uuid
  status      ChestStatus @default(available)
  earnedAt    DateTime    @default(now()) @map("earned_at")
  openedAt    DateTime?   @map("opened_at")
  expiresAt   DateTime?   @map("expires_at")
  rewards     Json?
  metadata    Json?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  affiliate   Affiliate   @relation(fields: [affiliateId], references: [id])
  chest       Chest       @relation(fields: [chestId], references: [id])

  @@map("affiliate_chests")
}

model Ranking {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @unique @db.VarChar(255)
  description String?       @db.Text
  type        RankingType
  status      RankingStatus @default(draft)
  startDate   DateTime      @map("start_date")
  endDate     DateTime      @map("end_date")
  prizes      Json
  rules       Json
  metadata    Json?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  participants RankingParticipant[]

  @@map("rankings")
}

model RankingParticipant {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rankingId   String    @map("ranking_id") @db.Uuid
  affiliateId String    @map("affiliate_id") @db.Uuid
  score       Decimal   @default(0) @db.Decimal(15, 2)
  position    Int?
  prize       Json?
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  ranking     Ranking   @relation(fields: [rankingId], references: [id])
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  @@unique([rankingId, affiliateId])
  @@map("ranking_participants")
}

// Sistema de inatividade

model InactivityRule {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  affiliateId String           @map("affiliate_id") @db.Uuid
  daysInactive Int             @map("days_inactive")
  status      InactivityStatus @default(active)
  appliedAt   DateTime?        @map("applied_at")
  expiresAt   DateTime?        @map("expires_at")
  metadata    Json?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relacionamentos
  affiliate   Affiliate        @relation(fields: [affiliateId], references: [id])

  @@map("inactivity_rules")
}

// Sistema de auditoria

model AuditLog {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?     @map("user_id") @db.Uuid
  action     String      @db.VarChar(255)
  resource   String      @db.VarChar(255)
  resourceId String?     @map("resource_id") @db.VarChar(255)
  details    Json?
  ipAddress  String?     @map("ip_address") @db.Inet
  userAgent  String?     @map("user_agent") @db.Text
  severity   LogSeverity @default(info)
  timestamp  DateTime    @default(now())

  // Relacionamentos
  user       User?       @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Sistema de configuração CPA

model CpaConfiguration {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activeModel       CpaValidationModel @default(model_1_1) @map("active_model")
  totalAmount       Decimal           @default(60.00) @map("total_amount") @db.Decimal(10, 2)
  level1Amount      Decimal           @default(35.00) @map("level1_amount") @db.Decimal(10, 2)
  level2Amount      Decimal           @default(10.00) @map("level2_amount") @db.Decimal(10, 2)
  level3Amount      Decimal           @default(5.00) @map("level3_amount") @db.Decimal(10, 2)
  level4Amount      Decimal           @default(5.00) @map("level4_amount") @db.Decimal(10, 2)
  level5Amount      Decimal           @default(5.00) @map("level5_amount") @db.Decimal(10, 2)
  minDeposit        Decimal           @default(30.00) @map("min_deposit") @db.Decimal(10, 2)
  minBets           Int               @default(10) @map("min_bets")
  minGgr            Decimal           @default(20.00) @map("min_ggr") @db.Decimal(10, 2)
  isActive          Boolean           @default(true) @map("is_active")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("cpa_configurations")
}

// Sistema de indicações e validações

model Referral {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  affiliateId       String    @map("affiliate_id") @db.Uuid
  customerId        String    @map("customer_id") @db.Uuid
  isValidated       Boolean   @default(false) @map("is_validated")
  validatedAt       DateTime? @map("validated_at")
  firstDeposit      Decimal?  @map("first_deposit") @db.Decimal(15, 2)
  firstDepositAt    DateTime? @map("first_deposit_at")
  totalBets         Int       @default(0) @map("total_bets")
  totalGgr          Decimal   @default(0) @map("total_ggr") @db.Decimal(15, 2)
  cpaProcessed      Boolean   @default(false) @map("cpa_processed")
  cpaProcessedAt    DateTime? @map("cpa_processed_at")
  metadata          Json?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  affiliate         Affiliate @relation(fields: [affiliateId], references: [id])

  @@unique([affiliateId, customerId])
  @@map("referrals")
}

// Índices adicionais
// Os índices básicos são criados automaticamente pelo Prisma para chaves primárias e únicas
// Índices customizados podem ser adicionados conforme necessário

